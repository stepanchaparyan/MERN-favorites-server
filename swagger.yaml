swagger: '2.0'
info:
  description: This is a my sample server swagger
  version: 1.0.0
  title: Swagger MERN-favorites-v2
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: chaparyanstepan@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:5000'
basePath: /api
tags:
  - name: product
    description: Everything about your product
    externalDocs:
      description: Find out more
      url: 'https://favorites-page.web.app/#/'
  - name: user
    description: ' User for log in to the app'
schemes:
  - https
  - http
paths:
  /products/add:
    post:
      tags:
        - product
      summary: Add a new product to the store
      description: Add a new product
      operationId: addProduct
      consumes:
        - application/x-www-form-urlencoded
        - application/json
      produces:
        - application/json
      parameters:
        - name: name
          in: formData
          description: Name on new product
          required: true
          type: string
        - name: description
          in: formData
          description: Description of new product
          required: true
          type: string
        - name: price
          in: formData
          description: Price on new product
          required: true
          type: integer
        - name: countInStock
          in: formData
          description: Couut of product in stock
          required: true
          type: integer
      responses:
        '405':
          description: Invalid input
  /products:
    get:
      tags:
        - product
      summary: Finds all products
      description: Find all products without any parameters
      operationId: findAllProducts
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/products/{productId}':
    get:
      tags:
        - product
      summary: Finds Product by ID
      description: Get one product by given ID
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: Id of product to get
          required: true
          type: string
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    required:
      - name
      - email
      - password
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      email:
        type: string
      password:
        type: string
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Product:
    type: object
    required:
      - createdBy
      - name
      - description
      - price
      - countInStock
    properties:
      createdBy:
        $ref: '#/definitions/User'
      description:
        type: string
        description: Simple description of product
        example: testDescription
      name:
        type: string
        description: Name of product
        example: testName
      price:
        type: integer
        description: Price of product
        example: '100'
      countInStock:
        type: integer
        description: The count of product in stock at currect time
        example: '3'
      imageUrl:
        type: string
    xml:
      name: Product
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
